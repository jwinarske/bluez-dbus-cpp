
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef _sdbuscpp_include_bluez_dbus_cpp_proxy_Adapter1_proxy_h_proxy_H_
#define _sdbuscpp_include_bluez_dbus_cpp_proxy_Adapter1_proxy_h_proxy_H_

#include <sdbus-c++/sdbus-c++.h>
#include <string>


namespace org::bluez {
    class Adapter1_proxy {
    public:
        static constexpr auto INTERFACE_NAME = "org.bluez.Adapter1";

    protected:
        explicit Adapter1_proxy(sdbus::IProxy &proxy)
            : proxy_(proxy) {
        }

        ~Adapter1_proxy() = default;

    public:
        void StartDiscovery() const {
            proxy_.callMethod("StartDiscovery").onInterface(INTERFACE_NAME);
        }

        void SetDiscoveryFilter(const std::map<std::string, sdbus::Variant> &properties) const {
            proxy_.callMethod("SetDiscoveryFilter").onInterface(INTERFACE_NAME).withArguments(properties);
        }

        void StopDiscovery() const {
            proxy_.callMethod("StopDiscovery").onInterface(INTERFACE_NAME);
        }

        void RemoveDevice(const sdbus::ObjectPath &device) const {
            proxy_.callMethod("RemoveDevice").onInterface(INTERFACE_NAME).withArguments(device);
        }

        [[nodiscard]] std::vector<std::string> GetDiscoveryFilters() const {
            std::vector<std::string> result;
            proxy_.callMethod("GetDiscoveryFilters").onInterface(INTERFACE_NAME).storeResultsTo(result);
            return result;
        }

        void ConnectDevice(const std::map<std::string, sdbus::Variant> &properties) const {
            proxy_.callMethod("ConnectDevice").onInterface(INTERFACE_NAME).withArguments(properties);
        }

        [[nodiscard]] std::string Address() const {
            return proxy_.getProperty("Address").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] std::string AddressType() const {
            return proxy_.getProperty("AddressType").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] std::string Name() const {
            return proxy_.getProperty("Name").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] std::string Alias() const {
            return proxy_.getProperty("Alias").onInterface(INTERFACE_NAME);
        }

        void Alias(const std::string &value) const {
            proxy_.setProperty("Alias").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] uint32_t Class() const {
            return proxy_.getProperty("Class").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] bool Powered() const {
            return proxy_.getProperty("Powered").onInterface(INTERFACE_NAME);
        }

        void Powered(const bool &value) const {
            proxy_.setProperty("Powered").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] bool Discoverable() const {
            return proxy_.getProperty("Discoverable").onInterface(INTERFACE_NAME);
        }

        void Discoverable(const bool &value) const {
            proxy_.setProperty("Discoverable").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] uint32_t DiscoverableTimeout() const {
            return proxy_.getProperty("DiscoverableTimeout").onInterface(INTERFACE_NAME);
        }

        void DiscoverableTimeout(const uint32_t &value) const {
            proxy_.setProperty("DiscoverableTimeout").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] bool Pairable() const {
            return proxy_.getProperty("Pairable").onInterface(INTERFACE_NAME);
        }

        void Pairable(const bool &value) const {
            proxy_.setProperty("Pairable").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] uint32_t PairableTimeout() const {
            return proxy_.getProperty("PairableTimeout").onInterface(INTERFACE_NAME);
        }

        void PairableTimeout(const uint32_t &value) const {
            proxy_.setProperty("PairableTimeout").onInterface(INTERFACE_NAME).toValue(value);
        }

        [[nodiscard]] bool Discovering() const {
            return proxy_.getProperty("Discovering").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] std::vector<std::string> UUIDs() const {
            return proxy_.getProperty("UUIDs").onInterface(INTERFACE_NAME);
        }

        [[nodiscard]] std::string Modalias() const {
            return proxy_.getProperty("Modalias").onInterface(INTERFACE_NAME);
        }

    private:
        sdbus::IProxy &proxy_;
    };
} // namespaces

#endif
