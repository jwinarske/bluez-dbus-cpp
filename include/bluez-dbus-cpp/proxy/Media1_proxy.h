
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_proxy_Media1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_proxy_Media1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>


namespace org::bluez {
    class Media1_proxy {
    public:
        static constexpr auto INTERFACE_NAME = "org.bluez.Media1";

    protected:
        explicit Media1_proxy(sdbus::IProxy &proxy)
            : proxy_(proxy) {
        }

        ~Media1_proxy() = default;

    public:
        void RegisterEndpoint(const sdbus::ObjectPath &endpoint,
                              const std::map<std::string, sdbus::Variant> &properties) const {
            proxy_.callMethod("RegisterEndpoint").onInterface(INTERFACE_NAME).withArguments(endpoint, properties);
        }

        void UnregisterEndpoint(const sdbus::ObjectPath &endpoint) const {
            proxy_.callMethod("UnregisterEndpoint").onInterface(INTERFACE_NAME).withArguments(endpoint);
        }

        void RegisterPlayer(const sdbus::ObjectPath &player,
                            const std::map<std::string, sdbus::Variant> &properties) const {
            proxy_.callMethod("RegisterPlayer").onInterface(INTERFACE_NAME).withArguments(player, properties);
        }

        void UnregisterPlayer(const sdbus::ObjectPath &player) const {
            proxy_.callMethod("UnregisterPlayer").onInterface(INTERFACE_NAME).withArguments(player);
        }

    private:
        sdbus::IProxy &proxy_;
    };
} // namespaces

#endif
