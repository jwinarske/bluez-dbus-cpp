
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef _sdbuscpp_include_bluez_dbus_cpp_proxy_AgentManager1_proxy_h_proxy_H_
#define _sdbuscpp_include_bluez_dbus_cpp_proxy_AgentManager1_proxy_h_proxy_H_

#include <sdbus-c++/sdbus-c++.h>
#include <string>


namespace org::bluez {
    class AgentManager1_proxy {
    public:
        static constexpr auto INTERFACE_NAME = "org.bluez.AgentManager1";

    protected:
        explicit AgentManager1_proxy(sdbus::IProxy &proxy)
            : proxy_(proxy) {
        }

        ~AgentManager1_proxy() = default;

    public:
        void RegisterAgent(const sdbus::ObjectPath &agent, const std::string &capability) const {
            proxy_.callMethod("RegisterAgent").onInterface(INTERFACE_NAME).withArguments(agent, capability);
        }

        void UnregisterAgent(const sdbus::ObjectPath &agent) const {
            proxy_.callMethod("UnregisterAgent").onInterface(INTERFACE_NAME).withArguments(agent);
        }

        void RequestDefaultAgent(const sdbus::ObjectPath &agent) const {
            proxy_.callMethod("RequestDefaultAgent").onInterface(INTERFACE_NAME).withArguments(agent);
        }

    private:
        sdbus::IProxy &proxy_;
    };
} // namespaces

#endif
